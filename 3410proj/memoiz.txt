# n is stored in $a0, A[] is stored in $a1, and s is stored in $a2

ADDIU $a0, $0, 40
ADDIU $a1, $0, 1000
ADDIU $a2, $0, 100
ADDIU $ra, $0, 9000

# if (n < s && A[n] != 0) return A[n];

ADDIU $t0, $0, 1	# $t0 = 1 (for use later)

Recursion:
ADDIU $sp, $sp, 8	# makes room for link address (next stack)
SW $ra, 4($sp)		# save link address
SLT $t1, $a0, $a2	# $t1 =  (n < s)
SLL $t2, $a0, 2		
ADDU $t5, $t2, $a1	# $t5 is the absolute address of A[n]
LW $t2, 0($t5)		# $t2 = A[n]
SLTU $t3, $0, $t2	# $t3 = (A[n] != 0)
AND $t4, $t1, $t3	# $t4 = (n < s) && (A[n] != 0)
BNE $t4, $0, End	# if $t4, return A[n] (using delay slot)
ADDIU $v0, $t2, 0	# $v0 = A[n]

# if (n == 1) return 0;

BEQ $t0, $a0, End	# if (n == 1), return 0 (using delay slot)
ADDIU $v0, $0, 0

# else {
#   int i;
#   if ((n % 2) == 0) i = 1 + m_hailstone(n/2, A, s);
#   else i = 1 + m_hailstone(3*n+1, A, s);

ANDI $t1, $a0, 1	# $t1 = n % 2
BEQ $t1, $zero, Even
NOP
BNE $t1, $zero, Odd	 
NOP

Even:
SRA $a0, $a0, 1		# n/2
JAL Recursion		# m_hailstone(n/2, A, s)
NOP
LW $a0, 0($sp)		#load value of output
ADDIU $v0, $v0, 1	# 1 + m_hailstone(n/2, A, s)
J Store
NOP

Odd:
SLL $t2, $a0, 1		# $t2 = 2n
ADDU $a0, $a0, $t2	# $a0 = 3n
ADDIU $a0, $a0, 1	# $a0 = 3n+1
JAL Recursion		# m_hailstone(3n+1, A, s)
NOP
LW $a0, 0($sp)		# load value of output
ADDIU $v0, $v0, 1	# 1 + m_hailstone(3n+1, A, s)
J Store
NOP

# if (n < s) A[n] = i; 

Store:
BEQ $t1, $0, End	# if !(n < s), don't store i
NOP
SW $v0, 0($t5)

# return i;

End:
SW $v0, 0($sp)
LW $ra, 4($sp)
ADDIU $sp, $sp, -8
JR $ra
NOP